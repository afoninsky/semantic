// Code generated for package static by go-bindata DO NOT EDIT. (@generated)
// sources:
// scripts/aliases.sh
// scripts/pre-hook.sh
package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsAliasesSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x95\x4d\x6f\xdb\x38\x13\xc7\xef\xfa\x14\xff\x87\x56\xd0\x38\xb5\xe2\x26\x47\x25\xee\xd3\x60\xbb\x40\x7d\xaa\x81\x5d\x20\x87\xd4\x28\x18\x71\x24\x11\x91\x48\x81\xa4\x93\x78\x0d\x7f\xf7\x05\xa9\xb7\xd8\x75\x8a\xcd\x21\xd0\x0c\x7f\xf3\xc2\x19\xce\x78\xf2\xbf\xf9\xa3\x54\x73\x5b\x46\x93\xc9\x04\xbc\x92\xdc\x92\x45\xae\x0d\x2c\xd5\x5c\x39\x99\x21\xd3\x75\x2d\x9d\x8d\x26\xd8\x58\x5e\x50\x0a\xab\x37\x26\xa3\x1e\xbe\xb4\x65\x14\xfd\x2c\x7a\xfc\x7c\x8a\x5d\x04\x00\xdc\x14\x76\x71\x0e\x16\x7f\x61\x98\x46\x41\xe5\xb6\x0d\x2d\x58\xbc\xf3\x47\x0f\x57\xeb\x3d\x0b\x5a\x9b\x69\xaf\x6e\x85\x9a\xac\x0f\xd2\x8b\x6d\x6c\x2f\x05\x51\xe6\x78\x40\x67\x7f\xbd\x4e\x3f\xa5\x57\x7b\x2c\xc0\x3e\x32\xac\x6f\xe0\x4a\x52\x81\x7a\xe3\x74\x64\xaf\xba\x68\x07\x41\xba\xe3\x2f\xeb\xf4\xfa\xcd\x71\x1f\x34\xde\xf9\x84\xf7\xe7\xf1\x2e\x78\xdb\x4f\x53\xc4\xbb\xce\xb6\xc3\xa9\xb2\xf4\x3b\xb7\x57\xef\xbb\xfd\xd5\x59\x2e\xc7\x5b\x3e\x20\xf9\x07\x2c\xee\x00\x86\xf5\xf1\x05\x29\x2b\x35\xd8\x52\x3d\xf3\x4a\x8a\xce\x77\x9f\xc1\x0c\x76\xd3\x34\xda\x38\x12\xbe\x95\x35\x77\x36\x65\x47\x96\x3f\xd8\xad\x37\xe2\x4a\x7c\xee\xcd\x7e\xb0\xdf\x41\x1f\x43\x11\xde\x67\x3b\xd0\xa6\x28\xb2\x52\x1b\x9a\xa1\x70\x64\xdd\x0c\x45\x43\x26\x9f\xa1\x10\x3a\x9b\xa1\x30\xe4\xbf\x73\xf9\xea\xff\x13\x77\x27\xea\x38\xc1\xdf\xdf\xbf\x7e\x4f\x91\xcb\x57\x18\xb2\xe4\xf0\x22\x9b\x59\xf7\xe9\x64\x55\xa1\xe2\xde\x35\xb4\x91\x85\x54\xd0\xaa\xda\xbe\x31\xfe\x19\xc0\xfb\xe5\x6a\xd0\x15\xd2\x81\x0b\x81\xe4\xee\x40\xd5\x15\x2d\xa9\xc1\xe2\x5d\x2b\x8c\x9d\xd8\x47\x51\x9f\x87\x75\xba\xc1\x4b\x49\x0a\xbc\x32\xc4\xc5\x16\xcd\xc6\x96\x24\xfa\x5a\x58\x18\xe2\x59\x49\x22\x1a\x42\x0f\x53\xd0\x66\xfa\xd7\xb7\xbb\x45\x7c\xee\x63\x1a\x7a\x4e\x1a\x6e\x2c\xe1\xdb\x9f\x77\x5f\xa7\x81\x31\x54\x6b\x47\xa7\x98\xf6\x82\xf3\x9a\x5b\x47\x06\xd7\x9f\x31\x17\xf4\x3c\x57\x9b\xaa\x9a\x8e\xf3\xc0\xe2\xff\x33\x24\x8a\xc0\x3e\xfd\x3a\x07\x86\xab\xf0\x22\x87\x3c\x4e\xd4\xbb\x67\x86\x3c\x2e\x2f\x8f\x79\xff\x34\xa3\xb6\xbc\xd2\x91\xf1\x87\x70\xa5\xd9\xa0\x92\xbe\x0f\x79\xbf\x24\xc2\xe6\x28\xe4\x33\xa9\xd6\x6b\xdb\x34\x27\x55\x31\x10\x99\x56\x8e\x4b\xe5\x55\x7d\x8f\x26\xa8\xf9\x13\x59\x58\x9d\xbb\xa4\x6d\xb3\xcc\xc1\xee\x97\x2b\xd6\x37\x29\xd7\x1b\x25\x02\xfc\x52\xca\xca\xfb\xe5\x02\x89\x41\x25\x15\xdd\x40\xe8\x71\xca\xb8\x25\xc4\x5e\x0d\x39\x96\xe1\xe2\x7e\xb9\xba\x98\x0e\xa2\xff\x6b\xb8\x21\xe5\x4a\x6e\xcb\x45\xbc\xf3\xfc\xd9\x19\x2e\xf6\x07\x48\xdb\x0c\x9f\x4e\x92\xf8\xdc\x10\x8f\x46\x07\xe0\xcd\xcd\x18\xe9\x30\xca\xa3\x21\xfe\xf4\x1e\x4b\x96\x67\x41\x10\x5a\x11\x6e\x6f\x6f\xd1\x3e\x80\x4a\x17\x48\x92\x47\x7f\x65\x6e\xb6\x48\x92\xc6\x90\x73\xdb\xc5\x87\x76\x98\xd3\xb3\x15\xce\xec\x07\xb0\x38\xd4\x98\x4d\x23\xff\x5a\xa3\x76\xec\x86\x97\x37\xae\x64\x84\x83\xb0\x89\x3d\x18\xc6\xf2\x14\x16\x66\x6a\xa0\xfc\xd4\x9e\xa2\xbc\x7e\xa4\x84\xce\x4e\x41\x42\x67\x76\x84\x0c\x9d\xf4\x64\x28\xe7\x99\xd3\x66\x04\x73\xf9\x7a\x0a\xf4\x8b\x60\x64\x88\x9f\xcc\xde\xeb\x07\x6a\xa3\xc2\xaf\x13\x8a\x17\xd9\x1c\xcc\x4d\xe4\x35\x83\xf9\xd1\x62\x38\x5a\x0a\xf7\xcb\x55\x0a\x47\x75\xa3\x8d\x6f\x43\x77\xf2\x60\x9f\x64\x83\x3f\x96\xeb\x36\x1d\x2e\xc4\x7f\x71\x97\xf0\x9a\x94\x40\x92\x28\x9d\x90\x90\x2e\xda\xff\x1b\x00\x00\xff\xff\x14\x79\x10\xaa\x7a\x07\x00\x00")

func scriptsAliasesShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsAliasesSh,
		"scripts/aliases.sh",
	)
}

func scriptsAliasesSh() (*asset, error) {
	bytes, err := scriptsAliasesShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/aliases.sh", size: 1914, mode: os.FileMode(420), modTime: time.Unix(1599548709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsPreHookSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6b\x1b\x31\x10\x85\xcf\xab\x5f\xf1\xa2\x35\xa4\x85\x6c\xe2\x40\x4e\x0e\x3e\x14\x5a\x88\x6f\xbe\xf9\x50\x5a\xa3\xd5\xce\x4a\x43\xb4\xd2\x22\xa9\x71\xf0\xa1\xbf\xbd\x68\xbb\x6c\xdc\x92\x42\xe7\x22\x46\x33\x6f\xe6\x7b\x53\x5f\xdd\xb5\xec\xef\x92\x15\xe2\xfc\xb0\xde\xae\xff\x33\x84\x38\x59\x76\x84\x48\xaa\x43\x13\x71\x84\x0b\x5a\xb9\x63\xb2\x0a\x47\x44\x1a\x42\xa6\x92\x3c\xa2\x0b\xa2\xe2\x1e\x5f\x21\x57\x4b\x8b\xc4\x16\xab\xf3\xc3\x1a\xdf\x1e\x91\x2d\x79\x51\x55\x35\x74\x18\x06\xce\xe0\x84\x8e\x1c\x65\xea\x44\x55\xb5\x91\xd4\xb3\xa8\x7a\x16\xa2\xaa\x61\x28\x23\x2a\x6f\x08\x39\x40\x5b\xd2\xcf\x1b\x28\xe7\x66\x65\x02\x7b\x68\x95\x08\x9e\x4e\x68\xa3\xf2\xda\x22\x44\x04\x4f\x09\x27\xcb\xda\x22\x65\x15\x73\x42\x1f\xc3\x00\xa7\x32\xa5\x0c\xf9\x9b\x55\x2e\x90\x6f\xec\xef\x50\x4e\xdb\xb7\x97\x4e\x44\x45\x2e\xd1\x45\xe9\x4d\x7f\x7b\xfb\x47\x5f\x31\x01\x00\x75\x5d\x63\x5a\xcd\xfd\x42\x6e\xd5\x0b\x41\x1e\x76\x7b\x59\x4c\x64\x4b\x68\xc9\x18\xf6\xec\xcd\xa4\x39\xf1\xf8\xa4\x92\xdd\xae\x3e\x18\xce\x88\xf4\xd2\x38\x4e\x19\x8d\xc7\x3d\x9a\xc6\x44\x1a\x71\xfd\xfd\xb0\xdb\x5f\x17\x03\x05\x44\x7e\x9c\x74\x93\xa7\x2b\x34\x67\xc8\xd5\x3c\x43\x2e\x76\x30\x07\x69\x1b\x20\x29\xc6\x10\x37\x0b\x91\x0e\x3e\x2b\xf6\x38\xec\xf6\x18\x28\x25\x65\x28\xdd\x60\x74\x54\x0e\x1c\xa9\x2d\x4f\xb6\x34\xa0\xa5\x3e\x44\xc2\xf8\x23\x59\xf6\xe6\x06\xf4\xaa\x86\xd1\xd1\x46\xfe\x35\xbf\x80\xa7\x5c\x00\xde\x29\xcc\x03\x1b\xc6\xd3\x97\x4f\x9f\x7f\xde\xaf\xff\xa9\xc6\x18\xc6\x8b\xe2\x2b\x67\xdc\x4f\x69\x39\x6f\x17\x3c\x09\x51\xcf\xdf\xbf\x02\x00\x00\xff\xff\x79\x71\x2c\xa9\xdb\x02\x00\x00")

func scriptsPreHookShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsPreHookSh,
		"scripts/pre-hook.sh",
	)
}

func scriptsPreHookSh() (*asset, error) {
	bytes, err := scriptsPreHookShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/pre-hook.sh", size: 731, mode: os.FileMode(493), modTime: time.Unix(1599548709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/aliases.sh":  scriptsAliasesSh,
	"scripts/pre-hook.sh": scriptsPreHookSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"aliases.sh":  &bintree{scriptsAliasesSh, map[string]*bintree{}},
		"pre-hook.sh": &bintree{scriptsPreHookSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
